# -*- coding: utf-8 -*-
"""visualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IskGplTQz_LmlI5X6yqet0fm-Nag8ns-
"""

import os
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

sns.set(style="whitegrid", rc={"figure.figsize": (8, 5)})

def ensure_dir(path):
    Path(path).mkdir(parents=True, exist_ok=True)

def correlation_heatmap(df, out_dir="outputs"):
    ensure_dir(out_dir)
    num_df = df.select_dtypes(include=[np.number])
    if num_df.shape[1] < 2:
        print("[visualization] Not enough numeric columns for heatmap.")
        return None
    plt.figure(figsize=(8, 6))
    sns.heatmap(num_df.corr(), annot=True, fmt=".2f", cmap="coolwarm")
    out = os.path.join(out_dir, "correlation_heatmap.png")
    plt.title("Correlation Heatmap")
    plt.tight_layout()
    plt.savefig(out)
    plt.close()
    print(f"[visualization] Saved heatmap -> {out}")
    return out

def histograms_and_boxplots(df, out_dir="outputs"):
    ensure_dir(out_dir)
    saved = {"hist": [], "box": []}
    num_df = df.select_dtypes(include=[np.number])
    for col in num_df.columns:
        # histogram
        plt.figure()
        sns.histplot(num_df[col].dropna(), kde=True)
        plt.title(f"Histogram: {col}")
        hist_path = os.path.join(out_dir, f"hist_{col}.png")
        plt.tight_layout()
        plt.savefig(hist_path)
        plt.close()
        saved["hist"].append(hist_path)

        # boxplot
        plt.figure()
        sns.boxplot(x=num_df[col].dropna())
        plt.title(f"Boxplot: {col}")
        box_path = os.path.join(out_dir, f"box_{col}.png")
        plt.tight_layout()
        plt.savefig(box_path)
        plt.close()
        saved["box"].append(box_path)

        print(f"[visualization] Saved hist and box for {col}")
    return saved

def barplots_for_categoricals(df, out_dir="outputs", top_n=10):
    ensure_dir(out_dir)
    saved = []
    cat_df = df.select_dtypes(include=["object", "category"])
    for col in cat_df.columns:
        counts = df[col].value_counts().nlargest(top_n)
        plt.figure(figsize=(8, 4))
        sns.barplot(x=counts.values, y=counts.index)
        plt.title(f"Top {top_n} values: {col}")
        plt.xlabel("Count")
        out = os.path.join(out_dir, f"bar_{col}.png")
        plt.tight_layout()
        plt.savefig(out)
        plt.close()
        saved.append(out)
        print(f"[visualization] Saved barplot for {col}")
    return saved

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", default="../data/sample.csv")
    parser.add_argument("--out", default="../outputs")
    args = parser.parse_args()
    import data_loader, preprocess
    df = data_loader.load_data(args.input)
    df = preprocess.preprocess_data(df)
    correlation_heatmap(df, args.out)
    histograms_and_boxplots(df, args.out)
    barplots_for_categoricals(df, args.out)