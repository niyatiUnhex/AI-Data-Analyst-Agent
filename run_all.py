# -*- coding: utf-8 -*-
"""run_all.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YBISqMm-vqpB8YYgFwWOs5nA-hCDxRrw
"""

"""
Orchestrator: runs full pipeline and writes report.
Usage:
python run_all.py --input ../data/sample.csv --output ../outputs/example_report.pdf
"""
import argparse
from pathlib import Path

from data_loader import load_data
from preprocess import preprocess_data
from eda import summary_statistics
from visualization import correlation_heatmap, histograms_and_boxplots, barplots_for_categoricals
from insights import generate_insights_text
from report_generator import generate_report

def collect_image_list(out_dir):
    p = Path(out_dir)
    if not p.exists():
        return []
    exts = [".png", ".jpg", ".jpeg"]
    imgs = sorted([str(x) for x in p.iterdir() if x.suffix.lower() in exts])
    return imgs

def main(input_path, output_pdf, out_dir="outputs"):
    print("[run_all] Starting pipeline")
    df = load_data(input_path)
    df = preprocess_data(df)
    stats = summary_statistics(df)  # optionally keep/use
    # ensure out_dir exists
    Path(out_dir).mkdir(parents=True, exist_ok=True)

    # Visualizations
    heatmap = correlation_heatmap(df, out_dir)
    saved = histograms_and_boxplots(df, out_dir)
    bars = barplots_for_categoricals(df, out_dir)

    # Insights
    insights_text = generate_insights_text(df)

    # collect images to include in report
    images = collect_image_list(out_dir)

    # Report
    title = f"AI Data Analyst Agent Report"
    generate_report(title, insights_text, image_paths=images, out_filename=output_pdf)
    print("[run_all] Pipeline complete")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", default="../data/sample.csv", help="Path to input CSV")
    parser.add_argument("--output", default="../outputs/example_report.pdf", help="Path for output PDF")
    parser.add_argument("--outdir", default="../outputs", help="Directory to save images")
    args = parser.parse_args()
    main(args.input, args.output, args.outdir)