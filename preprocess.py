# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reaii0JAtDXLGWgxrnog4CVs8ogdsWFD
"""

import pandas as pd
import numpy as np

def preprocess_data(df, drop_threshold=0.5):
    """
    Basic preprocessing:
    - Drop columns with > drop_threshold fraction missing
    - Fill numeric NaNs with median
    - Fill categorical NaNs with mode
    - Remove duplicate rows
    """
    df = df.copy()
    initial_shape = df.shape

    # Drop columns with too many missing values
    na_fraction = df.isna().mean()
    cols_to_drop = na_fraction[na_fraction > drop_threshold].index.tolist()
    if cols_to_drop:
        df.drop(columns=cols_to_drop, inplace=True)
        print(f"[preprocess] Dropped columns with >{drop_threshold*100:.0f}% missing: {cols_to_drop}")

    # Drop exact duplicate rows
    n_dup = df.duplicated().sum()
    if n_dup > 0:
        df = df.drop_duplicates()
        print(f"[preprocess] Dropped {n_dup} duplicate rows")

    # Fill numeric columns with median
    num_cols = df.select_dtypes(include=[np.number]).columns
    for c in num_cols:
        if df[c].isna().any():
            med = df[c].median()
            df[c].fillna(med, inplace=True)
            print(f"[preprocess] Filled numeric column '{c}' NaNs with median={med}")

    # Fill categorical with mode
    cat_cols = df.select_dtypes(include=["object", "category"]).columns
    for c in cat_cols:
        if df[c].isna().any():
            mode = df[c].mode()
            if not mode.empty:
                val = mode[0]
                df[c].fillna(val, inplace=True)
                print(f"[preprocess] Filled categorical column '{c}' NaNs with mode='{val}'")
            else:
                df[c].fillna("missing", inplace=True)
                print(f"[preprocess] Filled categorical column '{c}' NaNs with 'missing'")

    final_shape = df.shape
    print(f"[preprocess] Shape before: {initial_shape}, after: {final_shape}")
    return df

if __name__ == "__main__":
    # quick local test
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", default="../data/sample.csv")
    args = parser.parse_args()
    import data_loader
    df = data_loader.load_data(args.input)
    df2 = preprocess_data(df)
    print(df2.info())

